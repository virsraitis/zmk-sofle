#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

#include <input/processors.dtsi>
#include "zmk-helpers/helper.h"

// custom
//#include "includes/unicode.dtsi"

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

// Left-hand keys.

#define KEYS_L 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42

// Right-hand keys.

#define KEYS_R 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 43 44 45 46 47 48 49

// Thumb keys.

#define THUMBS 50 51 52 53 54 55 56 57 58 59

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define HM_TAPPING_TERM 280
#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 150

/ {
    behaviors {
        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <900>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <1>;      // 0
            time-to-max-speed-ms = <400>;      // 500
            delay-ms = <0>;                   //   10
        };

        // https://github.com/urob/zmk-config#timeless-homerow-mods

        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <KEYS_R THUMBS 7 8 9 10 11 12 20 21 22 23 24 25 33 34 35 36 37 38 46 47 48 49 50 51 53 54 55 56 57 59 60 61 62 63>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <KEYS_L THUMBS 0 1 2 3 4 5 13 14 15 16 17 18 26 27 28 29 30 31 39 40 41 42 43 44 53 54 55 56 57 59 60 61 62 63>;
            hold-trigger-on-release;
        };

        num_tap: num_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "NUM_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "balanced";
        };

        shift_dance: shift_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_DANCE";
            #binding-cells = <0>;
            bindings = <&longer_sticky LSHFT>, <&caps_word>;

            tapping-term-ms = <200>;
        };

        shift_dance_right: shift_dance_right {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_DANCE_RIGHT";
            #binding-cells = <0>;
            bindings = <&sk RSHIFT>, <&caps_word>;

            tapping-term-ms = <200>;
        };

        td_gui_caps_lock: td_gui_caps_lock {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_GUI_CAPS_LOCK";
            #binding-cells = <0>;
            bindings = <&kp LGUI>, <&kp CAPS>;
        };

        caps_word_cust: caps_word_cust {
            compatible = "zmk,behavior-caps-word";
            label = "CAPS_WORD_CUST";
            #binding-cells = <0>;
            continue-list = <UNDERSCORE BACKSPACE DELETE MINUS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        longer_sticky: longer_sticky {
            compatible = "zmk,behavior-sticky-key";
            label = "LONGER_STICKY";
            bindings = <&sk>;
            #binding-cells = <1>;
            release-after-ms = <4000>;
            ignore-modifiers;
            quick-release;
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    combos {
        compatible = "zmk,combos";

        enter {
            bindings = <&kp ENTER>;
            key-positions = <31 30>;
            layers = <0 1>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <41 42>;
            layers = <0 1>;
            timeout-ms = <70>;
            require-prior-idle-ms = <150>;
        };

        paste {
            bindings = <&kp RC(V)>;
            key-positions = <42 43>;
            layers = <0 1>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <43 41>;
            layers = <0 1>;
            timeout-ms = <70>;
            require-prior-idle-ms = <150>;
        };

        question_mark {
            bindings = <&kp QUESTION>;
            key-positions = <36 37>;
            layers = <0 1>;
            timeout-ms = <70>;
            require-prior-idle-ms = <150>;
        };

        paste_list {
            bindings = <&kp LA(V)>;
            key-positions = <44 43>;
            layers = <0 1>;
            timeout-ms = <70>;
            require-prior-idle-ms = <150>;
        };

        num_layer {
            bindings = <&tog 4>;
            key-positions = <31 44>;
            layers = <0 1>;
        };
    };

    macros {
        macro_copy: macro_copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp C>,
                <&macro_release>,
                <&kp LCTRL>;

            label = "MACRO_COPY";
        };

        macro_paste: macro_paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp V>,
                <&macro_release>,
                <&kp LCTRL>;

            label = "MACRO_PASTE";
        };

        macro_underscore: macro_underline {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHIFT>,
                <&macro_tap>,
                <&kp MINUS>,
                <&macro_release>,
                <&kp LSHIFT>;

            label = "MACRO_UNDERLINE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        QWERTY {
            bindings = <
&kp GRAVE          &num_tap LS(N1) N1  &num_tap LS(N2) N2  &num_tap LS(N3) N3  &num_tap LS(N4) N4  &num_tap LS(N5) N5    &kp UP_ARROW     &num_tap LS(N6) N6  &num_tap LS(N7) N7  &num_tap LS(N8) N8  &num_tap LS(N9) N9  &num_tap LS(N0) N0    &mo 6
&kp ESC            &kp Q               &kp W               &kp E               &kp R               &kp T                 &kp DOWN_ARROW   &kp Y               &kp U               &kp I               &kp O               &kp P                 &kp APOS
&kp TAB            &hm_l LEFT_GUI A    &hm_l LEFT_ALT S    &hm_l LSHIFT D      &hm_l LCTRL F       &kp G                 &kp LEFT_ARROW   &kp H               &hm_r RCTRL J       &hm_r RSHIFT K      &hm_r LALT L        &hm_r RIGHT_GUI SEMI  &kp BACKSPACE
&td_gui_caps_lock  &kp Z               &kp X               &kp C               &kp V               &kp B                 &kp RIGHT_ARROW  &kp N               &kp M               &kp COMMA           &kp DOT             &kp FSLH              &kp DELETE
&kp C_MUTE         &kp LCTRL           &kp LALT            &shift_dance        &lt 5 SPACE         &mo 2                 &kp ENTER        &sl 3               &lt 2 ENTER         &shift_dance_right  &kp RALT            &tog 4
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "QWERTY";
        };

        COLEMAK {
            bindings = <
&trans  &trans            &trans        &trans          &trans         &trans    &trans  &trans  &trans         &trans          &trans        &trans             &trans
&trans  &kp Q             &kp W         &kp F           &kp P          &kp B     &trans  &kp J   &kp L          &kp U           &kp Y         &mt COLON SEMI     &trans
&trans  &hm_l LEFT_GUI A  &hm_l LALT R  &hm_l LSHIFT S  &hm_l LCTRL T  &kp G     &trans  &kp M   &hm_r RCTRL N  &hm_r RSHIFT E  &hm_r LALT I  &hm_r RIGHT_GUI O  &trans
&trans  &kp Z             &kp X         &kp C           &kp D          &kp V     &trans  &kp K   &kp H          &kp COMMA       &kp DOT       &kp FSLH           &trans
&trans  &trans            &trans        &trans          &trans         &trans    &trans  &trans  &trans         &trans          &trans        &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            label = "COLEMAK";
        };

        NAV {
            bindings = <
&kp ESC     &kp F1  &kp F2  &kp F3  &kp F4      &kp F5            &mmv MOVE_UP     &kp F6         &kp F7      &kp F8      &kp F9     &kp F10       &kp F11
&trans      &trans  &trans  &trans  &trans      &msc SCRL_UP      &mmv MOVE_DOWN   &kp PG_UP      &kp HOME    &kp UP      &kp END    &kp LC(HOME)  &kp F12
&trans      &trans  &trans  &trans  &trans      &msc SCRL_DOWN    &mmv MOVE_LEFT   &kp PG_DN      &kp LEFT    &kp DOWN    &kp RIGHT  &kp LC(END)   &trans
&trans      &trans  &trans  &trans  &kp DELETE  &kp BACKSPACE     &mmv MOVE_RIGHT  &kp BACKSPACE  &kp DELETE  &kp INSERT  &trans     &trans        &trans
&kp C_MUTE  &trans  &trans  &trans  &trans      &trans            &mkp LCLK        &trans         &trans      &trans      &trans     &trans
            >;

            display-name = "NAV";
            sensor-bindings = <&scroll_encoder>;
        };

        LATVIAN {
            bindings = <
&trans  &trans     &trans     &trans            &trans  &trans       &trans  &trans     &trans     &trans     &trans     &trans     &trans
&trans  &trans     &trans     &kp RA(NUMBER_4)  &trans  &trans       &trans  &trans     &kp RA(L)  &kp RA(U)  &trans     &trans     &trans
&trans  &kp RA(A)  &kp RA(R)  &kp RA(S)         &trans  &kp RA(G)    &trans  &trans     &kp RA(N)  &kp RA(E)  &kp RA(I)  &kp RA(O)  &trans
&trans  &kp RA(Z)  &trans     &kp RA(C)         &trans  &trans       &trans  &kp RA(K)  &trans     &trans     &trans     &trans     &trans
&trans  &trans     &trans     &trans            &trans  &trans       &trans  &trans     &trans     &trans     &trans     &trans
            >;

            label = "LATVIAN";
        };

        NUM {
            bindings = <
&trans  &trans     &trans  &trans  &trans  &trans           &trans  &trans  &trans             &trans       &trans        &trans  &trans
&trans  &kp COLON  &kp N7  &kp N8  &kp N9  &kp SEMICOLON    &trans  &trans  &trans             &trans       &trans        &trans  &trans
&trans  &kp N0     &kp N4  &kp N5  &kp N6  &kp COLON        &trans  &trans  &macro_underscore  &macro_copy  &macro_paste  &trans  &trans
&trans  &kp DOT    &kp N1  &kp N2  &kp N3  &tog 4           &trans  &trans  &trans             &trans       &trans        &trans  &trans
&trans  &trans     &trans  &trans  &trans  &trans           &trans  &trans  &trans             &trans       &trans        &trans
            >;

            label = "NUM";
        };

        SYM {
            bindings = <
&trans  &kp EXCLAMATION  &kp AT_SIGN    &kp HASH           &kp DOLLAR            &kp PERCENT       &trans  &kp CARET        &kp AMPERSAND          &kp STAR       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &trans           &kp LESS_THAN  &kp LBKT           &kp LEFT_PARENTHESIS  &kp LEFT_BRACE    &trans  &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &kp RBKT       &kp GREATER_THAN      &kp COLON              &trans
&trans  &kp TILDE        &kp GRAVE      &kp DOUBLE_QUOTES  &kp APOSTROPHE        &trans            &trans  &kp FSLH         &kp UNDER              &kp PLUS       &kp EQUAL             &kp QUESTION           &trans
&trans  &kp EXCL         &kp AT         &kp HASH           &kp PIPE              &trans            &trans  &kp BSLH         &kp MINUS              &kp RA(MINUS)  &trans                &trans                 &trans
&trans  &trans           &trans         &trans             &trans                &trans            &trans  &trans           &trans                 &trans         &trans                &trans
            >;

            label = "SYM";
        };

        SYS {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &rgb_ug RGB_ON   &rgb_ug RGB_OFF  &rgb_ug RGB_HUI  &rgb_ug RGB_HUD  &trans           &trans
&trans  &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &mmv MOVE_DOWN   &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &rgb_ug RGB_SPI  &rgb_ug RGB_SPD  &rgb_ug RGB_EFR  &rgb_ug RGB_EFF
&trans  &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans          &mmv MOVE_LEFT   &to 7            &trans           &trans           &trans           &rgb_ug RGB_SAD  &rgb_ug RGB_SAI
&trans  &sys_reset    &trans          &bootloader   &bootloader   &trans          &mmv MOVE_RIGHT  &to 0            &to 1            &sys_reset       &soft_off        &bootloader      &trans
&trans  &trans        &trans          &trans        &trans        &trans          &mkp LCLK        &trans           &trans           &trans           &trans           &trans
            >;

            sensor-bindings = <&scroll_encoder>;
            label = "SYS";
        };

        GAMING {
            bindings = <
&kp ESC    &kp N1     &kp N2    &kp N3    &kp N4     &kp N5    &trans  &kp N6    &kp N7     &kp N8     &kp N9   &kp N0    &mo 6
&kp TAB    &kp Q      &kp W     &kp E     &kp R      &kp T     &trans  &kp Y     &kp U      &kp I      &kp O    &kp P     &kp BSLH
&kp CAPS   &kp A      &kp S     &kp D     &kp F      &kp G     &trans  &kp H     &kp J      &kp K      &kp L    &kp SEMI  &kp APOS
&kp LSHFT  &kp Z      &kp X     &kp C     &kp V      &kp B     &trans  &kp N     &kp M      &kp COMMA  &kp DOT  &kp FSLH  &trans
&trans     &kp LCTRL  &kp LWIN  &kp LALT  &kp SPACE  &trans    &trans  &kp BSPC  &kp ENTER  &kp RALT   &trans   &kp DEL
            >;

            label = "GAMING";
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };
    };
};
